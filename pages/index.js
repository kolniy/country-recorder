import Head from "next/head";
import { gql, useMutation } from "@apollo/client";
import { useState } from "react";
import { XIcon } from "@heroicons/react/outline";
import ClientOnly from "../components/ClientOnly";
import Locations from "../components/Locations";
import { useAlert } from "react-alert";
import Modal from "../components/Modal";
import { getLocationsQuery } from "../components/Locations";

const CREATE_LOCATION_MUTATION = gql`
  mutation ($createLocationData: createLocationInput!) {
    createNewLocation(data: $createLocationData) {
      id
      year
      area
      total_population
      area
    }
  }
`;

export default function Home() {
  const alert = useAlert();
  const [createRecord, setCreateRecord] = useState(false);
  const [createLocationDetails, setCreateLocationDetails] = useState({
    country: "",
    year: "",
    area: "",
    total_population: "",
  });

  const [createLocation, { loading }] = useMutation(CREATE_LOCATION_MUTATION, {
    variables: {
      createLocationData: {
        country: createLocationDetails.country,
        year: createLocationDetails.year,
        area: parseInt(createLocationDetails.area),
        population: parseInt(createLocationDetails.total_population),
      },
    },
    onError: (error) => {
      alert.show(error.message, {
        type: "error",
      });
      console.log(JSON.stringify(error));
    },
    onCompleted: () => {
      setCreateLocationDetails({
        ...createLocationDetails,
        country: "",
        year: "",
        area: "",
        total_population: "",
      });
      alert.show("Record Added Successfully", {
        type: "success",
      });
      setCreateRecord(false);
    },
    update(cache, { data: createNewLocation }) {
      const { getLocations } = cache.readQuery({
        query: getLocationsQuery,
      });

      cache.writeQuery({
        query: getLocationsQuery,
        data: {
          getLocations: [...getLocations, createNewLocation],
        },
      });
    },
  });

  const updateFormInputs = (e) =>
    setCreateLocationDetails({
      ...createLocationDetails,
      [e.target.name]: e.target.value,
    });

  const { country, year, area, total_population } = createLocationDetails;

  return (
    <>
      <div>
        <Head>
          <title>The Locations App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <main className="w-full h-full min-h-screen pt-10 bg-[#f2f4f7]">
          <section id="locations-section" className="w-full bg-white py-5">
            <div className="container w-9/12 mx-auto flex flex-col space-y-6 justify-between items-center md:flex-row">
              <div>
                <h2 className="font-bold text-2xl my-2">Locations</h2>
                <p className="text-sm mt-3 text-[#a0a4ae]">
                  Look up Countries And their MetaData, interact with the data
                  by adding your own information
                </p>
              </div>
              <div
                onClick={() => setCreateRecord(true)}
                className="py-3 px-7 text-sm cursor-pointer text-white bg-[#F25F3A] rounded-lg text-center"
              >
                Add Your Data
              </div>
            </div>
          </section>
          <div className="container mx-auto w-9/12 mt-6">
            <p className="text-sm text-[#a0a4ae]">Saved Locations</p>
          </div>

          <section id="locations-container" className="w-full mt-7">
            <div id="locations-content" className="container mx-auto w-9/12">
              <ClientOnly>
                <Locations />
              </ClientOnly>
            </div>
          </section>
        </main>
      </div>
      <Modal isOpen={createRecord}>
        <div className="w-1/3 h-auto min-w-[380px] bg-gray-100 rounded-sm">
          {/* modal header  */}
          <div className="modal-header pt-5 pb-3 px-7 flex items-center border-b-2 justify-between">
            <h3 className="font-semibold text-xl">Create New Record.</h3>
            <XIcon
              onClick={() => setCreateRecord(false)}
              className="h-5 w-5 cursor-pointer font-bold"
            />
          </div>
          {/* modal body  */}
          <div className="w-full px-7 py-11">
            <div className="input-container flex flex-col space-y-2 mb-3">
              <label className="text-md ml-3 font-semibold text-slate-500">
                Country
              </label>
              <input
                placeholder="Country"
                type="text"
                name="country"
                value={country}
                onChange={(e) => updateFormInputs(e)}
                className="outline-none rounded-md px-6 py-3 text-xs text-slate-400"
              />
            </div>
            <div className="input-container flex flex-col space-y-2 mb-3">
              <label className="text-md ml-3 font-semibold text-slate-500">
                Year
              </label>
              <input
                placeholder="Year"
                type="string"
                name="year"
                value={year}
                onChange={(e) => updateFormInputs(e)}
                className="outline-none rounded-md px-6 py-3 text-xs text-slate-400"
              />
            </div>
            <div className="input-container flex flex-col space-y-2 mb-3">
              <label className="text-md ml-3 font-semibold text-slate-500">
                Population
              </label>
              <input
                placeholder="Population"
                type="number"
                name="total_population"
                value={total_population}
                onChange={(e) => updateFormInputs(e)}
                className="outline-none rounded-md font-semibold px-6 py-3 text-xs text-slate-400"
              />
            </div>
            <div className="input-container flex flex-col space-y-2 mb-3">
              <label className="text-md ml-3 font-semibold text-slate-500">
                Area
              </label>
              <input
                type="number"
                placeholder="Area"
                name="area"
                value={area}
                onChange={(e) => updateFormInputs(e)}
                className="outline-none rounded-md px-6 py-3 text-xs text-slate-400"
              />
            </div>
          </div>

          {/* modal footer  */}
          <div className="flex flex-col items-center space-y-4 px-5 space-x-5 py-5 border-t-2 md:flex-row">
            <button
              onClick={() => setCreateRecord(false)}
              className="py-3 w-full px-7 text-sm cursor-pointer text-[#f25f3a] border-2 border-[#f25f3a] bg-white rounded-md"
            >
              Cancel
            </button>
            <button
              onClick={createLocation}
              disabled={loading}
              className="py-3 w-full px-7 text-sm cursor-pointer text-white bg-[#F25F3A] rounded-md"
            >
              {loading ? "loading..." : "Create Record"}
            </button>
          </div>
        </div>
      </Modal>
    </>
  );
}
